include("./src/qgplsim.ji")
include("./src/supportFunctions.ji")
using Base.Threads

function boston(noz = "age") # names of x, y, and z
    filename = "/home/kyan/Projects/Datasets/Boston.csv"
    data = DataFrame(CSV.File(filename))
    df = copy(data)
    dropmissing!(df)
    ndf = names(df)


    name_of_y = :medv
    names_of_x =  ["rm", "lstat", "dis"] # 3:8
    if noz == "rad"
        names_of_z =[:rad] # :pos
        g1, g2 = 4, 8
    elseif noz == "age"
        names_of_z = [:age]
        g1, g2 = 40, 80
    end
    dfy = df[!, name_of_y]
    dfX = df[!, names_of_x]
    dfZ = df[!, names_of_z]

    X, Z, y = Array(dfX), Array(dfZ), Array(dfy)
    Z = (Z .> g1) .+ (Z .> g2) .+ 0
    # Z = categ_binary(Z)
    X, Z, y
end
function califdata(stds = 3)
    filename = "/home/kyan/Projects/Datasets/housing.csv"
    chdata = DataFrame(CSV.File(filename))
    df = copy(chdata)
    dropmissing!(df)
    ndf = names(df)

    pos = df[!, ndf[1:2]]
    pos = Array(pos)
    km_pos = kmeans(pos |> transpose, 2)
    df[!, "pos"] = km_pos.assignments
#     dfop = CategoricalArray(df[!, "ocean_proximity"])
#     levels!(dfop, ["<1H OCEAN", "INLAND", "NEAR BAY", "NEAR OCEAN", "ISLAND"])
#     df[!, :lv_op] = levelcode.(dfop)
#     df= df[df[!, :lv_op] .!= 5, :]
    df[!, :ocean_proximity][[8228, 8229, 8230, 8231, 8232]] .= "NEAR OCEAN"
    df[!, :x1],df[!, :x2],df[!, :x3] = df.total_rooms./df.households, df.population./df.households, df.median_income

    name_of_y = :median_house_value
    names_of_x = [:x1, :x2, :x3] # 3:8
    names_of_z =[:pos, :ocean_proximity] # :pos
    dfy = df[!, name_of_y]
    dfX = df[!, names_of_x]
    dfZ = df[!, names_of_z]

    n,d = size(dfX)

    X, Z, y = Array(dfX), Array(dfZ), Array(dfy)
    

    for t in 1:2
        for j in 1:d
            mx = mean(X, dims = 1)
            sx = std(X, dims = 1)
            up_x = mx + stds * sx
            low_x = mx - stds * sx        
            ind = (low_x[j] .< X[:, j]).*(X[:, j] .< up_x[j])
            ind = Bool.(ind)
            X, Z, y = X[ind, :], Z[ind, :], y[ind]
        end
    end
    X, Z, y
end

function get_cardata()

    cardata = DataFrame(CSV.File("/home/kyan/Projects/Datasets/auto-mpg.csv"))
    indcar = cardata[:horsepower] .!= "?"
    cardata = cardata[indcar,:]
    cardata[:horsepower] = parse.(Float64, cardata[:horsepower]) 
    noy = :mpg
    nox = [:displacement, :weight, :acceleration, :horsepower] # 
    noz = :origin
    
    Xcar = Array(cardata[nox])
    Zcar = Array(cardata[noz])
    ycar = Array(cardata[noy])
    X = scaler(Xcar, 1)
    n = length(ycar)
    Zcar = reshape(Zcar, n, 1)
    Z, zmap = categ_binary(Zcar)
    y = copy(ycar)
    X, Z, y, zmap
end



function mc_simu(tau, width_exp, ntrain = 320, n_pt = 10) # n_pt = times of montecarlo on per. thread
    X, Z, y = get_cardata()
    nt = Threads.nthreads()
    nmc = n_pt * nt
    n,p = size(X)  
    n,q = size(Z)
    Theta = zeros(nmc, p)
    Gamma = zeros(nmc, q)
    Alpha = zeros(nmc, p)
    Beta  = zeros(nmc, q)
    @threads for i in 1:Threads.nthreads()
        for j in 1:n_pt
                t = (i - 1)*n_pt + j 
            
                indr, indt = get_train_index(Z, ntrain)

                Xr, Zr, yr = X[indr, :], Z[indr, :], y[indr]
                Xt, Zt, yt = X[indt, :], Z[indt, :], y[indt]
            
                carmodel = qgplsim.model(Xr, Zr, yr, tau, width_exp)

                Theta[t, :], Gamma[t, :],
                Alpha[t, :], Beta[t, :] = qgplsim.estimator(carmodel)
                
                vv = Xt * carmodel.theta
                ylx = Xt * carmodel.alpha
                ylz = Zt * carmodel.beta
                gv = qgplsim.predict(carmodel, Xt, Zt, 2, "mean")
                yp = gv + ylx + ylz
                
        end
    end
    Theta, Gamma, Alpha, Beta
end
