using DataFrames, CSV, CategoricalArrays
using Statistics, Clustering, LinearAlgebra
using Base.Threads

include("./src/supportFunctions.ji")

function boston(noz = "age") # names of x, y, and z
    filename = "./datasets/Boston.csv"
    data = DataFrame(CSV.File(filename))
    df = copy(data)
    dropmissing!(df)
    ndf = names(df)


    name_of_y = :medv
    names_of_x =  ["rm", "lstat", "dis"] # 3:8
    if noz == "rad"
        names_of_z =[:rad] # :pos
        g1, g2 = 4, 8
    elseif noz == "age"
        names_of_z = [:age]
        g1, g2 = 40, 80
    end
    dfy = df[!, name_of_y]
    dfX = df[!, names_of_x]
    dfZ = df[!, names_of_z]

    X, Z, y = Array(dfX), Array(dfZ), Array(dfy)
    Z = (Z .> g1) .+ (Z .> g2) .+ 0
    # Z = categ_binary(Z)
    X, Z, y
end
function califdata(stds = 3)
    filename = "./datasets/housing.csv"
    chdata = DataFrame(CSV.File(filename))
    df = copy(chdata)
    dropmissing!(df)
    ndf = names(df)

    pos = df[!, ndf[1:2]]
    pos = Array(pos)
    km_pos = kmeans(pos |> transpose, 2)
    df[!, "pos"] = km_pos.assignments
    dfop = CategoricalArray(df[!, "ocean_proximity"])
    levels!(dfop, ["<1H OCEAN", "INLAND", "NEAR BAY", "NEAR OCEAN", "ISLAND"])
    df[!, :lv_op] = levelcode.(dfop)
    df= df[df[!, :lv_op] .!= 5, :]
    ndf = names(df)

    name_of_y = :median_house_value
    names_of_x = Symbol.(ndf[1:8]) # 3:8
    names_of_z =[:lv_op, :pos] # :pos
    dfy = df[!, name_of_y]
    dfX = df[!, names_of_x]
    dfZ = df[!, names_of_z]

    n,d = size(dfX)

    X, Z, y = Array(dfX), Array(dfZ), Array(dfy)
    
    mx = mean(X, dims = 1)[1,:]
    sx = std(X, dims = 1)[1,:]
    up_x = mx +  stds * sx
    low_x = mx - stds * sx
    ind = ones(n)
    for k in 1:n
        for j in 3:d
            ind[k] *= (low_x[j] < X[k, j])*(X[k, j] < up_x[j])
        end
    end
    ind = Bool.(ind)
    X, Z, y = X[ind, :], Z[ind, :], y[ind]
    X, Z, y
end
