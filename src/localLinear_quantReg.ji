module localLinear_quantReg
using Distributions, QuantReg, GLM, DataFrames
using Optim
include("supportFunctions.ji")

#     function direct_optim(yi, Xi, w, tau = 0.5)
# 		y = yi .* w    
# 		n = length(y)
#         it = 1
# 		X = [ones(n, it) Xi] .* w
# 		# df = DataFrame(X, :auto)
#         df = DataFrame()
#         try
#             df = DataFrame(X, :auto)
#         catch e
#             if isa(e, MethodError)
#                 df = DataFrame(X)
#             end
#         end
# 		nox = Symbol.(names(df))
# 		df[!, :y] = y
# 		formula1 = Term(:y) ~ sum([Term(x) for x in nox])	
# 		model = QuantRegModel(formula1, df, τ = tau)

#         try
#             QuantReg.fitgurobi!(model)
#         catch e
#             ot = DataFrame([w yi Xi], :auto)
#             println(ot[1:5, :])

#         end
#         res = coef(model)[(it + 1):end]
#         res[1] += coef(model)[1]
#         res
#     end

    function direct_optim(yi::Vector, Xi::Matrix, w::Vector, tau, dv = 1)
        y = yi .* w 
        n = length(y)
        if dv == 1
            X = [ones(n, 1) Xi] .* w 
        else
            X = ones(n, 1) .* w
        end
        n, d = size(X)		
        r(x) = ρ(x, tau)
        tarfunc(b::Vector) = sum(r.(y - X*b))
        res = Optim.optimize(tarfunc, zeros(d), method = BFGS(), f_tol = 1e-5)
        b0 = Optim.minimizer(res)
    end

end