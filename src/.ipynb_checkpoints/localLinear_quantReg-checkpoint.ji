module localLinear_quantReg
using Distributions, LinearAlgebra, GLM, DataFrames
using Optim, QuantReg
include("supportFunctions.ji")



    function qr_solver(df::DataFrame, noy, nox, tau)
    
		formula1 = Term(noy) ~ sum([Term(x) for x in nox])	
		model = QuantRegModel(formula1, df, τ = tau)
        QuantReg.fit!(model)
        res = coef(model)
    
    end

    function qr_solver(y, X, quantNum)

		n = length(y)
		# df = DataFrame(X, :auto)
        df = DataFrame()
        try
            df = DataFrame(X, :auto)
        catch e
            if isa(e, MethodError)
                df = DataFrame(X)
            end
        end
        
        tau = quantNum[1]
		nox = Symbol.(names(df))
        d = length(nox) + 1
		df[!, :y] = y
		formula1 = Term(:y) ~ sum([Term(x) for x in nox])	
		model = QuantRegModel(formula1, df, τ = tau)

        try
            QuantReg.fit!(model)
            res = coef(model)            
        catch e
            println("qr fitting failed")
            return zeros(d)
        end
    end

    function solver(yi::Vector, X::Matrix, w::Vector, tau, method="qr")
        n, d = size(X)   
    
        if  method == "mean"
#             W = Diagonal(w)
#             b0 = pinv(transpose(X) * W * X)*transpose(X) * W * yi
            b0 = pinv(transpose(X .* w) * X)*transpose(X .* w) * yi
        
        elseif  method == "mmqr"
            t0 = pinv(transpose(X .* w) * X)*transpose(X .* w) * yi
            b0 = mmqr(yi, X, tau, t0)
        
        else
            y = yi .* w 
            X = X .* w
            b0 = qr_solver(y, X, tau)        
        end
    
        return b0
    end

    function mmqr(yi, Xi, tau, theta0, eps = 0.47, tol = 1e-6)
        q = tau[1]
        thetak = theta0 .+ 100*tol
        max_iter = 100
        k = 0
        while norm(thetak - theta0) > tol && k < max_iter

            theta0 = thetak
            rk = yi - Xi * theta0
            W = Diagonal(1 ./ (eps .+ rk))
            v = 1 .- 2q .- rk ./ (eps .+ rk)
            Δ = -pinv(transpose(Xi) * W * Xi)*transpose(Xi) * v
            thetak = theta0 + Δ
            # println(thetak)
            k += 1
        end

        thetak
    
    end

end