using DataFrames, CSV, DelimitedFiles
using Statistics, LinearAlgebra, CategoricalArrays
using Distributions, Clustering, Random


function Base.:-(X::Matrix, xi::Vector)
    n, p = size(X)
    if length(xi) == p
        Xi = repeat(xi|>transpose, n, 1)
    elseif length(xi) == n
        Xi = repeat(xi, 1, p)
    else
        println("the length of xi are not n or p")
    end    
    _Xi = X - Xi
    _Xi
end
    
distribution_ker = Normal(0, 1)
    
function epker(x)
    i = abs(x) <= 1
    return 0.75 * (1 - x^2) * i
end
function gsker(x)
    pdf(distribution_ker, x)
    # exp(- x^2 / 2)
end

function ker(x)
    gsker(x)
end

function ker(x::Vector, h::Float64)
	ker.(x/h)/h
end

function ker(x::Vector, h::Vector)
    d = length(x)
    v = 1
    for i in 1:d 
        v *= ker(x[i]/h[i])/h[i]
    end
    v
end

function ker(X::Matrix, h::Vector)
    n, p = size(X)
    v = zeros(n)
    for i in 1:n
        v[i] = ker(X[i, :], h)
    end
    v
end

rho(x, α::Float64) = abs(x) + (2α - 1)x

function ρ(x, α::Vector{Float64}) # for cqr
    res = 0
    lena = length(α)
    for k in 1:lena
        res += rho(x, α[k])
    end
    res
end

function rho_eps(r, a, e)
    res = rho(r, a) + e/2 * log(e + abs(r))
    res
end

function collection(c)
    n  = length(c)
    categ_c = []
    dict_c = Dict()
    for i in 1:n
        if c[i] in categ_c
            push!(dict_c[c[i]], i)
        else
            push!(categ_c, c[i])
            dict_c[c[i]] = [i]
        end
    end
    # most_c = argmax(length.(dict_c[z] for z in categ_c))
    categ_c, dict_c  # , categ_c[most_c]
end

function collection(c::Vector)
    n  = length(c)
    categ_c = []
    dict_c = Dict()
    for i in 1:n
        if c[i] in categ_c
            push!(dict_c[c[i]], i)
        else
            push!(categ_c, c[i])
            dict_c[c[i]] = [i]
        end
    end
    # most_c = argmax(length.(dict_c[z] for z in categ_c))
    categ_c, dict_c  # , categ_c[most_c]
end

function collection(c::Matrix)
    n,  = size(c)
    categ_c = []
    dict_c = Dict()
    for i in 1:n
        if c[i, :] in categ_c
            push!(dict_c[c[i, :]], i)
        else
            push!(categ_c, c[i, :])
            dict_c[c[i, :]] = [i]
        end
    end
    # most_c = argmax(length.(dict_c[z] for z in categ_c))
    categ_c, dict_c # , categ_c[most_c]
end

function categ_binary(Z::T where T <:Array)
    n,  = size(Z)
    categ, index = collection(Z)
    ncateg = length(categ)
    res = Int.(zeros(n, ncateg))
    for k in 1:ncateg
        zk = categ[k]
        res[index[zk], k] .= 1
    end
    res
end

function scaler(X, stdv = 1.0)
    ntrain, = size(X)
    Xr = X .- mean(X, dims = 1)
    Xr = Xr ./ std(Xr, dims = 1) .* stdv
    Xr 
end

function glquad(g, v0, v1, c0, c1, ng::Int = 11)
	
	if ng == 11

	      knots = [0, -0.9782, -0.8871, -0.7302, -0.5191, -0.2695, 0.9782, 0.8871, 0.7302, 0.5191, 0.2695]
	      weigtht = [ 0.2729, 0.0557, 0.1256, 0.1863, 0.2332, 0.2628, 0.0557, 0.1256, 0.1863, 0.2332, 0.2628]

	elseif ng == 21

	      knots = [-0.9938,-0.9672,-0.9201,-0.8534,-0.7684,-0.6671,-0.5516,-0.4243,-0.2880,-0.1456,0,0.1456,0.2880,0.4243,0.5516,0.6671,0.7684,0.8534,0.9201,0.9672,0.9938]
	      weigtht = [0.0160,0.0370,0.0571,0.0761,0.0934,0.1088,0.1218,0.1323,0.1399,0.1445,0.1461,0.1445,0.1399,0.1323,0.1218,0.1088,0.0934,0.0761,0.0571,0.0370,0.0160]         

	elseif ng == 39
		
	      knots = [-0.9981473830664329,-0.990251536854686,-0.9760987093334711,-0.9557752123246522,-0.9294091484867383,-0.8971671192929929,-0.8592529379999062,-0.8159062974301431,-0.7674012429310635,-0.7140444358945347,-0.656173213432011,-0.594153454957278,-0.5283772686604374,-0.45926051230913606,-0.38724016397156147,-0.31277155924818595,-0.23632551246183578,-0.1583853399978378,-0.07944380460875548,0.0,0.07944380460875548,0.1583853399978378,0.23632551246183578,0.31277155924818595,0.38724016397156147,0.45926051230913606,0.5283772686604374,0.594153454957278,0.656173213432011,0.7140444358945347,0.7674012429310635,0.8159062974301431,0.8592529379999062,0.8971671192929929,0.9294091484867383,0.9557752123246522,0.9760987093334711,0.990251536854686,0.9981473830664329]
	      weigtht = [0.004752962002870793,0.011034619178488796,0.017256950610607225,0.02336733816233885,0.02933956348736036,0.03510616661585583,0.040688944302280844,0.04594886770429246,0.05102358471071133,0.0556159177316648,0.06008827977682491,0.06385778432111208,0.06765868343974728,0.07046337827534874,0.07354438539939762,0.07526805056702454,0.077591279874792,0.07815956112362715,0.07968466601532286,0.07908025088487561,0.07975469101140294,0.0780237875133733,0.07778478637544121,0.07502762678843224,0.07381924509900675,0.0701671043384489,0.06796377708615636,0.06355530960829776,0.06037832294349931,0.055346256395425,0.051266828892747134,0.045736233489338654,0.04086847596782835,0.034960695907748175,0.029451395217917502,0.023287454669461315,0.017307810344958152,0.011008512672289649,0.004760451493683451]  
          
    elseif ng == 5

	      knots = [-0.90618,  -0.538469, 0, 0.538469, 0.90618]
	      weigtht = [0.236927,  0.478629, 0.568889, 0.478629, 0.236927]

	end

	v = (knots .+ 1)./2 .* (v1 - v0) .+ v0
	gv = g.(v) 

	gv_ = c0 .* (gv .< c0) .+ c1 .* (gv .> c1) .+ gv .* (1 .- (gv .< c0) .- (gv .> c1)) 
	transpose(gv_) * weigtht * (v1 - v0) ./ 2
end
