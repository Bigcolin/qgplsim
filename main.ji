include("MonteCarloSIM.ji")
import Base.Threads.@threads

α = [1.0, 0.5] # single index for x
θ = [1.0, -2.0]  # linear for x, <α, θ> = 0 for identification
γ = [0.5, 1.0] # single index for z
β = [-1.0, -0.5] # linear for z
# Q(y|x, z) = Xθ + Zβ + g(Xα + Zγ)

n = 200
fx = 2 # y = f(x), fx for different f(x)     
                # fx = 1, y = X*θ + Z*β + (X*α + Z*γ .- 1).^2 + 0.2ϵ
                # fx = 2, y = X*θ + Z*β + log.(1 .+ exp.(X*α + Z*γ .- 1)) + 0.2ϵ
ifz = true #if false, Z = 0, i.e. no category varible
dist = 1 # Cauchy or Gauss
τ = 0.5
rep = 2  
# for k in (1:1)
    Xk, Zk, yk = dgp(n, γ, θ, α, β, fx, dist, ifz)
    modelk = qgplsim.model(Xk, Zk, yk, τ)
    alpha, gamma, theta, beta, squ = qgplsim.estimator(modelk)
    println(gamma, "\n", beta, "\n", squ)
# end

# alpha, gamma, theta, beta, Squ =  MonteCarlo(n, γ, θ, α, β, τ, fx, dist, rep)
