include("DGP.ji")
include("qgplsim.ji")
import Base.Threads.@threads
using Statistics, Clustering, DataFrames, CSV
using ProgressBars

function MonteCarlo(n, γ, θ, α, β, fx = 2, dist = 1, len = 100, alpha_type = 1)
    # fx = 1 # y = f(x), fx for different f(x)     
                # fx = 1, y = X*θ + Z*β + (X*α + Z*γ .- 1).^2 + 0.2ϵ
                # fx = 2, y = X*θ + Z*β + log.(1 .+ exp.(X*α + Z*γ .- 1)) + 0.2ϵ
    # dist = 1 # 1 for Cauchy, 0 for Gauss
    ifz = true # if false, Z = 0, i.e. no category varible
    τ = 0.5
    p = length(α)
    # t = time() 
    Theta0 = zeros(len, p)
    Alpha0 = zeros(len, p)
    Gamma0 = zeros(len, 2)
    Beta0 = zeros(len, 2)
    for j in tqdm(1:len) # each 25
        X, Z, y = dgp(n, γ, θ, α, β, fx, dist, ifz)
        model_ij = qgplsim.model(X, Z, y, τ)

        Alpha0[j, :], Theta0[j, :],
        Gamma0[j, :], Beta0[j, :] = qgplsim.estimator(model_ij, alpha_type)
    end
    # println("MC Computing time: ", time() - t)

    # Alpha, Theta, Gamma, Beta = Alpha1, Theta1, Gamma1, Beta1
    Alpha, Theta, Gamma, Beta = Alpha0, Theta0, Gamma0, Beta0
    Ra = kmeans(transpose(Alpha), 2)
    Rg = kmeans(transpose(Gamma), 2)
    ind1 = Ra.assignments .== 1
    ind2 = Ra.assignments .== 2
    Alpha1 = Alpha[ind1, :]
    Alpha2 = Alpha[ind2, :]
    Gamma1 = Gamma[ind1, :]
    Gamma2 = Gamma[ind2, :]
    n1 = sum(ind1)
    n2 = len - n1
    alpha1 = abs.(sum(Alpha1, dims = 1))
    alpha2 = abs.(sum(Alpha2, dims = 1))
    gamma1 = abs.(sum(Gamma1, dims = 1))
    gamma2 = abs.(sum(Gamma2, dims = 1))
    alpha = (alpha1 + alpha2) / len
    gamma = (gamma1 + gamma2) / len
    theta = sum(Theta, dims = 1)/len
    beta = sum(Beta, dims = 1)/len
    vara = (var(Alpha1, dims = 1) * n1 + var(Alpha2, dims = 1) * n2)/len
    varg = (var(Gamma1, dims = 1) * n1 + var(Gamma2, dims = 1) * n2)/len
    vart = var(Theta, dims = 1)
    varb = var(Beta, dims = 1)
    res = Dict(:α1 => alpha[1], :α2 => alpha[2],
              :θ1 => theta[1], :θ2 => theta[2],
              :γ1 => gamma[1], :γ2 => gamma[2],
              :β1 => beta[1], :β2 => beta[2],
              :var_α1 => vara[1], :var_α2 => vara[2],
              :var_θ1 => vart[1], :var_θ2 => vart[2],
              :var_γ1 => varg[1], :var_γ2 => varg[2],
              :var_β1 => varb[1], :var_β2 => varb[2])

    res, Alpha, Gamma, Theta, Beta


end
function simulation(n::Int, fx = 2, dist = 0)
	α = [1.0, 0.5] # single index for x
	θ = [1.0, -2.0]  # linear for x, <α, θ> = 0 for identification
	# γ = [1.0, 0.5] # single index for z
	β = [1.0, -0.5] # linear for z
	# Q(y|x, z) = Xθ + Zβ + g(Xα + Zγ)
	# n = 400

	df = DataFrame(α1 = Float64[], α2 = Float64[],
		var_α1 = Float64[], var_α2 = Float64[],    
		θ1 = Float64[], θ2 = Float64[],
		var_θ1 = Float64[], var_θ2 = Float64[], 
		β1 = Float64[], β2 = Float64[],
		var_β1 = Float64[], var_β2 = Float64[], 
		γ1 = Float64[], γ2 = Float64[],
		var_γ1 = Float64[], var_γ2 = Float64[])

		@threads for γ in [[1.0, 0.5], [1.0, 0.001], [0.001, 1.0], [0.5, 1.0], [0.001, 0.001], [0.5, 0.5]]
			res, =  MonteCarlo(n, γ, θ, α, β, fx, dist)
			push!(df, res)
		end
		CSV.write("$n.csv", df)
end