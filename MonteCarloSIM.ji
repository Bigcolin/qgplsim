include("DGP.ji")
include("qgplsim.ji")
import Base.Threads.@threads
using DelimitedFiles
using ProgressBars

function mean2d(x)
    return mean(x, dims = 1)
end

function med2d(x)
    return median(x, dims = 1)
end

function MonteCarlo(n, γ, θ, α, β, τ = 0.5, fx = 2, dist = 1, widthExp = -0.17, intercept = 0,  rep = 100)
    # fx = 1 # y = f(x), fx for different f(x)     
                # fx = 1, y = X*θ + Z*β + (X*α + Z*γ .- 1).^2 + 0.2ϵ
                # fx = 2, y = X*θ + Z*β + log.(1 .+ exp.(X*α + Z*γ .- 1)) + 0.2ϵ
    # dist = 1 # 1 for Cauchy, 0 for Gauss
    ifz = true # if false, Z = 0, i.e. no category varible
    alpha_type = 1
    # len_alpha = norm(α)
    p = length(α) - (1 - intercept)
    # t = time() 
    Theta0 = zeros(rep, 2)
    Alpha0 = zeros(rep, p)
    Gamma0 = zeros(rep, 2)
    Beta0 = zeros(rep, 2)
    nt =  Threads.nthreads()
    rep_t = Int(rep/nt)
    for i in 1:nt
        for j in (1:rep_t)
            X, Z, y = dgp(n, γ, θ, α, β, fx, dist, ifz)
            model_ij = qgplsim.model(X, Z, y, τ, widthExp, intercept)
            ind = rep_t * (i - 1) + j
            Alpha0[ind, :], Gamma0[ind, :],
            Theta0[ind, :], Beta0[ind, :] = qgplsim.estimator(model_ij, alpha_type)
        end
    end
    Alpha0, Gamma0, Theta0, Beta0

end

function simulation(n::Int, fx = 2, dist = 0, τ = 0.5)
	α = [-1.0, 1.0, -2.0] # single index for x
    # lenα = norm(α)
	θ = [0.0, 2.0, 1.0]  # linear for x, <α, θ> = 0 for identification
	# γ = [1.0, 0.5] # single index for z
	β = [0.5, -0.5] # linear for z
	# Q(y|x, z) = Xθ + Zβ + g(Xα + Zγ)
	# n = 400
    dir = "./simulations/"
    sn = "$n"
    sf = "f$fx"
    sd = "d$dist"
    fname0 = string(dir, sn, sf, sd) 
	df = DataFrame(α1 = Float64[], α2 = Float64[],
		var_α1 = Float64[], var_α2 = Float64[],    
		γ1 = Float64[], γ2 = Float64[],
		var_γ1 = Float64[], var_γ2 = Float64[],
		θ1 = Float64[], θ2 = Float64[],
		var_θ1 = Float64[], var_θ2 = Float64[], 
		β1 = Float64[], β2 = Float64[],
		var_β1 = Float64[], var_β2 = Float64[])
        Γ = [[0.5, 0.001], [0.5, 1.0], [0.001, 0.5], [1.0, 0.5], [0.5, 0.5]] 
        ngamma = 5
		for k in 1:ngamma
            γ = Γ[k]
            Alpha, Gamma, Theta, Beta = MonteCarlo(n, γ, θ, α, β, τ, fx, dist)
            res = [Alpha Gamma Theta Beta]
            fname = string(fname0, "g$k.txt")
            open(fname, "w") do io
                writedlm(io, res)
            end
		end
end

function main(N = 500,
              F = [1 2], D = [0, 1])

    set = []
     for n in N
        for f in F
            for d in D
                s = [n, f, d]
                push!(set, s)
            end
        end
    end
    
    @threads for s in set
        simulation(s[1], s[2], s[3])       
    end

end